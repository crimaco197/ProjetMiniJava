State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On CLASS shift to state 1
-- On program shift to state 98
-- On main_class shift to state 99
## Reductions:

State 1:
## Known stack suffix:
## CLASS
## LR(1) items:
main_class -> CLASS . IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On IDENT shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
main_class -> CLASS IDENT . LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On LBRACE shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## CLASS IDENT LBRACE
## LR(1) items:
main_class -> CLASS IDENT LBRACE . PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On PUBLIC shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC . STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On STATIC shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC . VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On VOID shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID . MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On MAIN shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN . LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On LPAREN shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN . STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On STRING shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING . LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On LBRACKET shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET . RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On RBRACKET shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET . IDENT RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On IDENT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT . RPAREN LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On RPAREN shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN . LBRACE instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On LBRACE shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE . instruction RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On IF shift to state 70
-- On IDENT shift to state 74
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On instruction shift to state 95
-- On expression shift to state 87
-- On block shift to state 89
## Reductions:

State 15:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAREN expression RPAREN instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On LPAREN shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
instruction -> WHILE LPAREN . expression RPAREN instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 62
## Reductions:

State 17:
## Known stack suffix:
## THIS
## LR(1) items:
raw_expression -> THIS . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> THIS

State 18:
## Known stack suffix:
## NOT
## LR(1) items:
raw_expression -> NOT . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 61
## Reductions:

State 19:
## Known stack suffix:
## NEW
## LR(1) items:
raw_expression -> NEW . INTEGER LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> NEW . IDENT LPAREN RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On INTEGER shift to state 20
-- On IDENT shift to state 58
## Reductions:

State 20:
## Known stack suffix:
## NEW INTEGER
## LR(1) items:
raw_expression -> NEW INTEGER . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## NEW INTEGER LBRACKET
## LR(1) items:
raw_expression -> NEW INTEGER LBRACKET . expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 56
## Reductions:

State 22:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . expression RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 27
## Reductions:

State 23:
## Known stack suffix:
## INT_CONST
## LR(1) items:
raw_expression -> INT_CONST . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> INT_CONST

State 24:
## Known stack suffix:
## IDENT
## LR(1) items:
raw_expression -> IDENT . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> IDENT

State 25:
## Known stack suffix:
## BOOL_CONST
## LR(1) items:
raw_expression -> BOOL_CONST . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> BOOL_CONST

State 26:
## Known stack suffix:
## raw_expression
## LR(1) items:
expression -> raw_expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production expression -> raw_expression

State 27:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> LPAREN expression . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RPAREN shift to state 55
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 28:
## Known stack suffix:
## expression TIMES
## LR(1) items:
raw_expression -> expression TIMES . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## expression TIMES expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression TIMES expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT GT EGAL COMMA AND
--   reduce production raw_expression -> expression TIMES expression

State 30:
## Known stack suffix:
## expression LBRACKET
## LR(1) items:
raw_expression -> expression LBRACKET . expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## expression LBRACKET expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression LBRACKET expression . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RBRACKET shift to state 32
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 32:
## Known stack suffix:
## expression LBRACKET expression RBRACKET
## LR(1) items:
raw_expression -> expression LBRACKET expression RBRACKET . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> expression LBRACKET expression RBRACKET

State 33:
## Known stack suffix:
## expression PLUS
## LR(1) items:
raw_expression -> expression PLUS . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression PLUS expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On TIMES shift to state 28
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On SEMICOLON RPAREN RBRACKET PLUS MINUS LT GT EGAL COMMA AND
--   reduce production raw_expression -> expression PLUS expression

State 35:
## Known stack suffix:
## expression DOT
## LR(1) items:
raw_expression -> expression DOT . IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression DOT . LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On LENGTH shift to state 36
-- On IDENT shift to state 37
## Reductions:

State 36:
## Known stack suffix:
## expression DOT LENGTH
## LR(1) items:
raw_expression -> expression DOT LENGTH . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> expression DOT LENGTH

State 37:
## Known stack suffix:
## expression DOT IDENT
## LR(1) items:
raw_expression -> expression DOT IDENT . LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## expression DOT IDENT LPAREN
## LR(1) items:
raw_expression -> expression DOT IDENT LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On separated_nonempty_list(COMMA,expression) shift to state 39
-- On raw_expression shift to state 26
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 40
-- On expression shift to state 42
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 39:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 40:
## Known stack suffix:
## expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
## LR(1) items:
raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> expression DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 42:
## Known stack suffix:
## expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On TIMES shift to state 28
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On COMMA shift to state 51
-- On AND shift to state 53
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 43:
## Known stack suffix:
## expression MINUS
## LR(1) items:
raw_expression -> expression MINUS . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression MINUS expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On TIMES shift to state 28
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On SEMICOLON RPAREN RBRACKET PLUS MINUS LT GT EGAL COMMA AND
--   reduce production raw_expression -> expression MINUS expression

State 45:
## Known stack suffix:
## expression LT
## LR(1) items:
raw_expression -> expression LT . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expression LT expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression LT expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On TIMES shift to state 28
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On SEMICOLON RPAREN RBRACKET COMMA AND
--   reduce production raw_expression -> expression LT expression

State 47:
## Known stack suffix:
## expression GT
## LR(1) items:
raw_expression -> expression GT . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expression GT expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression GT expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On TIMES shift to state 28
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On SEMICOLON RPAREN RBRACKET COMMA AND
--   reduce production raw_expression -> expression GT expression

State 49:
## Known stack suffix:
## expression EGAL
## LR(1) items:
raw_expression -> expression EGAL . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expression EGAL expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression EGAL expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On TIMES shift to state 28
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On SEMICOLON RPAREN RBRACKET COMMA AND
--   reduce production raw_expression -> expression EGAL expression

State 51:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On separated_nonempty_list(COMMA,expression) shift to state 52
-- On raw_expression shift to state 26
-- On expression shift to state 42
## Reductions:

State 52:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 53:
## Known stack suffix:
## expression AND
## LR(1) items:
raw_expression -> expression AND . expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expression AND expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression AND expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On TIMES shift to state 28
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
## Reductions:
-- On SEMICOLON RPAREN RBRACKET COMMA AND
--   reduce production raw_expression -> expression AND expression

State 55:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production expression -> LPAREN expression RPAREN

State 56:
## Known stack suffix:
## NEW INTEGER LBRACKET expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> NEW INTEGER LBRACKET expression . RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RBRACKET shift to state 57
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 57:
## Known stack suffix:
## NEW INTEGER LBRACKET expression RBRACKET
## LR(1) items:
raw_expression -> NEW INTEGER LBRACKET expression RBRACKET . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> NEW INTEGER LBRACKET expression RBRACKET

State 58:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
raw_expression -> NEW IDENT . LPAREN RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On LPAREN shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## NEW IDENT LPAREN
## LR(1) items:
raw_expression -> NEW IDENT LPAREN . RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On RPAREN shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## NEW IDENT LPAREN RPAREN
## LR(1) items:
raw_expression -> NEW IDENT LPAREN RPAREN . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND
--   reduce production raw_expression -> NEW IDENT LPAREN RPAREN

State 61:
## Known stack suffix:
## NOT expression
## LR(1) items:
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
raw_expression -> NOT expression . [ TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT COMMA AND ]
## Transitions:
-- On LBRACKET shift to state 30
-- On DOT shift to state 35
## Reductions:
-- On TIMES SEMICOLON RPAREN RBRACKET PLUS MINUS LT GT EGAL COMMA AND
--   reduce production raw_expression -> NOT expression

State 62:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
instruction -> WHILE LPAREN expression . RPAREN instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RPAREN shift to state 63
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 63:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
instruction -> WHILE LPAREN expression RPAREN . instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On IF shift to state 70
-- On IDENT shift to state 74
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On instruction shift to state 94
-- On expression shift to state 87
-- On block shift to state 89
## Reductions:

State 64:
## Known stack suffix:
## SYSO
## LR(1) items:
instruction -> SYSO . LPAREN expression RPAREN SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On LPAREN shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## SYSO LPAREN
## LR(1) items:
instruction -> SYSO LPAREN . expression RPAREN SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## SYSO LPAREN expression
## LR(1) items:
instruction -> SYSO LPAREN expression . RPAREN SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RPAREN shift to state 67
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 67:
## Known stack suffix:
## SYSO LPAREN expression RPAREN
## LR(1) items:
instruction -> SYSO LPAREN expression RPAREN . SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On SEMICOLON shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## SYSO LPAREN expression RPAREN SEMICOLON
## LR(1) items:
instruction -> SYSO LPAREN expression RPAREN SEMICOLON . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> SYSO LPAREN expression RPAREN SEMICOLON

State 69:
## Known stack suffix:
## LBRACE
## LR(1) items:
block -> LBRACE . list(instruction) RBRACE [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On IF shift to state 70
-- On IDENT shift to state 74
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On list(instruction) shift to state 90
-- On instruction shift to state 92
-- On expression shift to state 87
-- On block shift to state 89
## Reductions:
-- On RBRACE
--   reduce production list(instruction) ->

State 70:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAREN expression RPAREN instruction ELSE instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
instruction -> IF . LPAREN expression RPAREN instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On LPAREN shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
instruction -> IF LPAREN . expression RPAREN instruction ELSE instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
instruction -> IF LPAREN . expression RPAREN instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## IF LPAREN expression
## LR(1) items:
instruction -> IF LPAREN expression . RPAREN instruction ELSE instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
instruction -> IF LPAREN expression . RPAREN instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RPAREN PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RPAREN shift to state 73
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 73:
## Known stack suffix:
## IF LPAREN expression RPAREN
## LR(1) items:
instruction -> IF LPAREN expression RPAREN . instruction ELSE instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
instruction -> IF LPAREN expression RPAREN . instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On IF shift to state 70
-- On IDENT shift to state 74
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On instruction shift to state 84
-- On expression shift to state 87
-- On block shift to state 89
## Reductions:

State 74:
## Known stack suffix:
## IDENT
## LR(1) items:
instruction -> IDENT . ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
instruction -> IDENT . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> IDENT . [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On LBRACKET shift to state 75
-- On ASSIGN shift to state 81
## Reductions:
-- On TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND
--   reduce production raw_expression -> IDENT
** Conflict on LBRACKET

State 75:
## Known stack suffix:
## IDENT LBRACKET
## LR(1) items:
instruction -> IDENT LBRACKET . expression RBRACKET ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## IDENT LBRACKET expression
## LR(1) items:
instruction -> IDENT LBRACKET expression . RBRACKET ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES RBRACKET PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On RBRACKET shift to state 77
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 77:
## Known stack suffix:
## IDENT LBRACKET expression RBRACKET
## LR(1) items:
instruction -> IDENT LBRACKET expression RBRACKET . ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On ASSIGN shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## IDENT LBRACKET expression RBRACKET ASSIGN
## LR(1) items:
instruction -> IDENT LBRACKET expression RBRACKET ASSIGN . expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## IDENT LBRACKET expression RBRACKET ASSIGN expression
## LR(1) items:
instruction -> IDENT LBRACKET expression RBRACKET ASSIGN expression . SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 80
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 80:
## Known stack suffix:
## IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
## LR(1) items:
instruction -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> IDENT LBRACKET expression RBRACKET ASSIGN expression SEMICOLON

State 81:
## Known stack suffix:
## IDENT ASSIGN
## LR(1) items:
instruction -> IDENT ASSIGN . expression SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## IDENT ASSIGN expression
## LR(1) items:
instruction -> IDENT ASSIGN expression . SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 83
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 83:
## Known stack suffix:
## IDENT ASSIGN expression SEMICOLON
## LR(1) items:
instruction -> IDENT ASSIGN expression SEMICOLON . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> IDENT ASSIGN expression SEMICOLON

State 84:
## Known stack suffix:
## IF LPAREN expression RPAREN instruction
## LR(1) items:
instruction -> IF LPAREN expression RPAREN instruction . ELSE instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
instruction -> IF LPAREN expression RPAREN instruction . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On ELSE shift to state 85
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> IF LPAREN expression RPAREN instruction
** Conflict on ELSE

State 85:
## Known stack suffix:
## IF LPAREN expression RPAREN instruction ELSE
## LR(1) items:
instruction -> IF LPAREN expression RPAREN instruction ELSE . instruction [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On IF shift to state 70
-- On IDENT shift to state 74
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On instruction shift to state 86
-- On expression shift to state 87
-- On block shift to state 89
## Reductions:

State 86:
## Known stack suffix:
## IF LPAREN expression RPAREN instruction ELSE instruction
## LR(1) items:
instruction -> IF LPAREN expression RPAREN instruction ELSE instruction . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> IF LPAREN expression RPAREN instruction ELSE instruction

State 87:
## Known stack suffix:
## expression
## LR(1) items:
instruction -> expression . SEMICOLON [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 88
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 88:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
instruction -> expression SEMICOLON . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> expression SEMICOLON

State 89:
## Known stack suffix:
## block
## LR(1) items:
instruction -> block . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> block

State 90:
## Known stack suffix:
## LBRACE list(instruction)
## LR(1) items:
block -> LBRACE list(instruction) . RBRACE [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
-- On RBRACE shift to state 91
## Reductions:

State 91:
## Known stack suffix:
## LBRACE list(instruction) RBRACE
## LR(1) items:
block -> LBRACE list(instruction) RBRACE . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production block -> LBRACE list(instruction) RBRACE

State 92:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ RETURN RBRACE ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On IF shift to state 70
-- On IDENT shift to state 74
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On list(instruction) shift to state 93
-- On instruction shift to state 92
-- On expression shift to state 87
-- On block shift to state 89
## Reductions:
-- On RETURN RBRACE
--   reduce production list(instruction) ->

State 93:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ RETURN RBRACE ]
## Transitions:
## Reductions:
-- On RETURN RBRACE
--   reduce production list(instruction) -> instruction list(instruction)

State 94:
## Known stack suffix:
## WHILE LPAREN expression RPAREN instruction
## LR(1) items:
instruction -> WHILE LPAREN expression RPAREN instruction . [ WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST ]
## Transitions:
## Reductions:
-- On WHILE THIS SYSO RETURN RBRACE NOT NEW LPAREN LBRACE INT_CONST IF IDENT ELSE BOOL_CONST
--   reduce production instruction -> WHILE LPAREN expression RPAREN instruction

State 95:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction . RBRACE RBRACE [ EOF CLASS ]
## Transitions:
-- On RBRACE shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE . RBRACE [ EOF CLASS ]
## Transitions:
-- On RBRACE shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE
## LR(1) items:
main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE . [ EOF CLASS ]
## Transitions:
## Reductions:
-- On EOF CLASS
--   reduce production main_class -> CLASS IDENT LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET IDENT RPAREN LBRACE instruction RBRACE RBRACE

State 98:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 99:
## Known stack suffix:
## main_class
## LR(1) items:
program -> main_class . defs EOF [ # ]
## Transitions:
-- On CLASS shift to state 100
-- On list(clas) shift to state 143
-- On defs shift to state 144
-- On clas shift to state 146
## Reductions:
-- On EOF
--   reduce production list(clas) ->

State 100:
## Known stack suffix:
## CLASS
## LR(1) items:
clas -> CLASS . IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE [ EOF CLASS ]
## Transitions:
-- On IDENT shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
clas -> CLASS IDENT . option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE [ EOF CLASS ]
## Transitions:
-- On EXTENDS shift to state 102
-- On option(preceded(EXTENDS,IDENT)) shift to state 104
## Reductions:
-- On LBRACE
--   reduce production option(preceded(EXTENDS,IDENT)) ->

State 102:
## Known stack suffix:
## EXTENDS
## LR(1) items:
option(preceded(EXTENDS,IDENT)) -> EXTENDS . IDENT [ LBRACE ]
## Transitions:
-- On IDENT shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## EXTENDS IDENT
## LR(1) items:
option(preceded(EXTENDS,IDENT)) -> EXTENDS IDENT . [ LBRACE ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production option(preceded(EXTENDS,IDENT)) -> EXTENDS IDENT

State 104:
## Known stack suffix:
## CLASS IDENT option(preceded(EXTENDS,IDENT))
## LR(1) items:
clas -> CLASS IDENT option(preceded(EXTENDS,IDENT)) . LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE [ EOF CLASS ]
## Transitions:
-- On LBRACE shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE
## LR(1) items:
clas -> CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE . list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE [ EOF CLASS ]
## Transitions:
-- On INTEGER shift to state 106
-- On IDENT shift to state 109
-- On BOOLEAN shift to state 110
-- On typ shift to state 111
-- On list(pair(typ,terminated(IDENT,SEMICOLON))) shift to state 115
## Reductions:
-- On RBRACE PUBLIC
--   reduce production list(pair(typ,terminated(IDENT,SEMICOLON))) ->

State 106:
## Known stack suffix:
## INTEGER
## LR(1) items:
typ -> INTEGER . [ IDENT ]
typ -> INTEGER . LBRACKET RBRACKET [ IDENT ]
## Transitions:
-- On LBRACKET shift to state 107
## Reductions:
-- On IDENT
--   reduce production typ -> INTEGER

State 107:
## Known stack suffix:
## INTEGER LBRACKET
## LR(1) items:
typ -> INTEGER LBRACKET . RBRACKET [ IDENT ]
## Transitions:
-- On RBRACKET shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## INTEGER LBRACKET RBRACKET
## LR(1) items:
typ -> INTEGER LBRACKET RBRACKET . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> INTEGER LBRACKET RBRACKET

State 109:
## Known stack suffix:
## IDENT
## LR(1) items:
typ -> IDENT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> IDENT

State 110:
## Known stack suffix:
## BOOLEAN
## LR(1) items:
typ -> BOOLEAN . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> BOOLEAN

State 111:
## Known stack suffix:
## typ
## LR(1) items:
list(pair(typ,terminated(IDENT,SEMICOLON))) -> typ . IDENT SEMICOLON list(pair(typ,terminated(IDENT,SEMICOLON))) [ RBRACE PUBLIC ]
## Transitions:
-- On IDENT shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## typ IDENT
## LR(1) items:
list(pair(typ,terminated(IDENT,SEMICOLON))) -> typ IDENT . SEMICOLON list(pair(typ,terminated(IDENT,SEMICOLON))) [ RBRACE PUBLIC ]
## Transitions:
-- On SEMICOLON shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## typ IDENT SEMICOLON
## LR(1) items:
list(pair(typ,terminated(IDENT,SEMICOLON))) -> typ IDENT SEMICOLON . list(pair(typ,terminated(IDENT,SEMICOLON))) [ RBRACE PUBLIC ]
## Transitions:
-- On INTEGER shift to state 106
-- On IDENT shift to state 109
-- On BOOLEAN shift to state 110
-- On typ shift to state 111
-- On list(pair(typ,terminated(IDENT,SEMICOLON))) shift to state 114
## Reductions:
-- On RBRACE PUBLIC
--   reduce production list(pair(typ,terminated(IDENT,SEMICOLON))) ->

State 114:
## Known stack suffix:
## typ IDENT SEMICOLON list(pair(typ,terminated(IDENT,SEMICOLON)))
## LR(1) items:
list(pair(typ,terminated(IDENT,SEMICOLON))) -> typ IDENT SEMICOLON list(pair(typ,terminated(IDENT,SEMICOLON))) . [ RBRACE PUBLIC ]
## Transitions:
## Reductions:
-- On RBRACE PUBLIC
--   reduce production list(pair(typ,terminated(IDENT,SEMICOLON))) -> typ IDENT SEMICOLON list(pair(typ,terminated(IDENT,SEMICOLON)))

State 115:
## Known stack suffix:
## CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON)))
## LR(1) items:
clas -> CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) . list(metho) RBRACE [ EOF CLASS ]
## Transitions:
-- On PUBLIC shift to state 116
-- On metho shift to state 139
-- On list(metho) shift to state 141
## Reductions:
-- On RBRACE
--   reduce production list(metho) ->

State 116:
## Known stack suffix:
## PUBLIC
## LR(1) items:
metho -> PUBLIC . typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On INTEGER shift to state 106
-- On IDENT shift to state 109
-- On BOOLEAN shift to state 110
-- On typ shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## PUBLIC typ
## LR(1) items:
metho -> PUBLIC typ . IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On IDENT shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## PUBLIC typ IDENT
## LR(1) items:
metho -> PUBLIC typ IDENT . LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On LPAREN shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN . loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On INTEGER shift to state 106
-- On IDENT shift to state 109
-- On BOOLEAN shift to state 110
-- On typ shift to state 120
-- On separated_nonempty_list(COMMA,pair(typ,IDENT)) shift to state 124
-- On loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) shift to state 125
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) ->

State 120:
## Known stack suffix:
## typ
## LR(1) items:
separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ . IDENT [ RPAREN ]
separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ . IDENT COMMA separated_nonempty_list(COMMA,pair(typ,IDENT)) [ RPAREN ]
## Transitions:
-- On IDENT shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## typ IDENT
## LR(1) items:
separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ IDENT . [ RPAREN ]
separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ IDENT . COMMA separated_nonempty_list(COMMA,pair(typ,IDENT)) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 122
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ IDENT

State 122:
## Known stack suffix:
## typ IDENT COMMA
## LR(1) items:
separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ IDENT COMMA . separated_nonempty_list(COMMA,pair(typ,IDENT)) [ RPAREN ]
## Transitions:
-- On INTEGER shift to state 106
-- On IDENT shift to state 109
-- On BOOLEAN shift to state 110
-- On typ shift to state 120
-- On separated_nonempty_list(COMMA,pair(typ,IDENT)) shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## typ IDENT COMMA separated_nonempty_list(COMMA,pair(typ,IDENT))
## LR(1) items:
separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ IDENT COMMA separated_nonempty_list(COMMA,pair(typ,IDENT)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,pair(typ,IDENT)) -> typ IDENT COMMA separated_nonempty_list(COMMA,pair(typ,IDENT))

State 124:
## Known stack suffix:
## separated_nonempty_list(COMMA,pair(typ,IDENT))
## LR(1) items:
loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) -> separated_nonempty_list(COMMA,pair(typ,IDENT)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) -> separated_nonempty_list(COMMA,pair(typ,IDENT))

State 125:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT)))
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) . RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On RPAREN shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN . LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On LBRACE shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE . declarations_and_statements RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On INTEGER shift to state 106
-- On IF shift to state 70
-- On IDENT shift to state 128
-- On BOOL_CONST shift to state 25
-- On BOOLEAN shift to state 110
-- On typ shift to state 129
-- On raw_expression shift to state 26
-- On list(instruction) shift to state 132
-- On instruction shift to state 92
-- On expression shift to state 87
-- On declarations_and_statements shift to state 134
-- On block shift to state 89
## Reductions:
-- On RETURN
--   reduce production list(instruction) ->

State 128:
## Known stack suffix:
## IDENT
## LR(1) items:
instruction -> IDENT . ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN NOT NEW LPAREN LBRACE INT_CONST IF IDENT BOOL_CONST ]
instruction -> IDENT . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON [ WHILE THIS SYSO RETURN NOT NEW LPAREN LBRACE INT_CONST IF IDENT BOOL_CONST ]
raw_expression -> IDENT . [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
typ -> IDENT . [ IDENT ]
## Transitions:
-- On LBRACKET shift to state 75
-- On ASSIGN shift to state 81
## Reductions:
-- On TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND
--   reduce production raw_expression -> IDENT
-- On IDENT
--   reduce production typ -> IDENT
** Conflict on LBRACKET

State 129:
## Known stack suffix:
## typ
## LR(1) items:
declarations_and_statements -> typ . IDENT SEMICOLON declarations_and_statements [ RETURN ]
## Transitions:
-- On IDENT shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## typ IDENT
## LR(1) items:
declarations_and_statements -> typ IDENT . SEMICOLON declarations_and_statements [ RETURN ]
## Transitions:
-- On SEMICOLON shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## typ IDENT SEMICOLON
## LR(1) items:
declarations_and_statements -> typ IDENT SEMICOLON . declarations_and_statements [ RETURN ]
## Transitions:
-- On WHILE shift to state 15
-- On THIS shift to state 17
-- On SYSO shift to state 64
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On LBRACE shift to state 69
-- On INT_CONST shift to state 23
-- On INTEGER shift to state 106
-- On IF shift to state 70
-- On IDENT shift to state 128
-- On BOOL_CONST shift to state 25
-- On BOOLEAN shift to state 110
-- On typ shift to state 129
-- On raw_expression shift to state 26
-- On list(instruction) shift to state 132
-- On instruction shift to state 92
-- On expression shift to state 87
-- On declarations_and_statements shift to state 133
-- On block shift to state 89
## Reductions:
-- On RETURN
--   reduce production list(instruction) ->

State 132:
## Known stack suffix:
## list(instruction)
## LR(1) items:
declarations_and_statements -> list(instruction) . [ RETURN ]
## Transitions:
## Reductions:
-- On RETURN
--   reduce production declarations_and_statements -> list(instruction)

State 133:
## Known stack suffix:
## typ IDENT SEMICOLON declarations_and_statements
## LR(1) items:
declarations_and_statements -> typ IDENT SEMICOLON declarations_and_statements . [ RETURN ]
## Transitions:
## Reductions:
-- On RETURN
--   reduce production declarations_and_statements -> typ IDENT SEMICOLON declarations_and_statements

State 134:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements . RETURN expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On RETURN shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN . expression SEMICOLON RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On THIS shift to state 17
-- On NOT shift to state 18
-- On NEW shift to state 19
-- On LPAREN shift to state 22
-- On INT_CONST shift to state 23
-- On IDENT shift to state 24
-- On BOOL_CONST shift to state 25
-- On raw_expression shift to state 26
-- On expression shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression . SEMICOLON RBRACE [ RBRACE PUBLIC ]
raw_expression -> expression . PLUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . MINUS expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . TIMES expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . AND expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . GT expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . EGAL expression [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT IDENT LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . LBRACKET expression RBRACKET [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
raw_expression -> expression . DOT LENGTH [ TIMES SEMICOLON PLUS MINUS LT LBRACKET GT EGAL DOT AND ]
## Transitions:
-- On TIMES shift to state 28
-- On SEMICOLON shift to state 137
-- On PLUS shift to state 33
-- On MINUS shift to state 43
-- On LT shift to state 45
-- On LBRACKET shift to state 30
-- On GT shift to state 47
-- On EGAL shift to state 49
-- On DOT shift to state 35
-- On AND shift to state 53
## Reductions:

State 137:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON . RBRACE [ RBRACE PUBLIC ]
## Transitions:
-- On RBRACE shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE
## LR(1) items:
metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE . [ RBRACE PUBLIC ]
## Transitions:
## Reductions:
-- On RBRACE PUBLIC
--   reduce production metho -> PUBLIC typ IDENT LPAREN loption(separated_nonempty_list(COMMA,pair(typ,IDENT))) RPAREN LBRACE declarations_and_statements RETURN expression SEMICOLON RBRACE

State 139:
## Known stack suffix:
## metho
## LR(1) items:
list(metho) -> metho . list(metho) [ RBRACE ]
## Transitions:
-- On PUBLIC shift to state 116
-- On metho shift to state 139
-- On list(metho) shift to state 140
## Reductions:
-- On RBRACE
--   reduce production list(metho) ->

State 140:
## Known stack suffix:
## metho list(metho)
## LR(1) items:
list(metho) -> metho list(metho) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production list(metho) -> metho list(metho)

State 141:
## Known stack suffix:
## CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho)
## LR(1) items:
clas -> CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) . RBRACE [ EOF CLASS ]
## Transitions:
-- On RBRACE shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE
## LR(1) items:
clas -> CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE . [ EOF CLASS ]
## Transitions:
## Reductions:
-- On EOF CLASS
--   reduce production clas -> CLASS IDENT option(preceded(EXTENDS,IDENT)) LBRACE list(pair(typ,terminated(IDENT,SEMICOLON))) list(metho) RBRACE

State 143:
## Known stack suffix:
## list(clas)
## LR(1) items:
defs -> list(clas) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production defs -> list(clas)

State 144:
## Known stack suffix:
## main_class defs
## LR(1) items:
program -> main_class defs . EOF [ # ]
## Transitions:
-- On EOF shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## main_class defs EOF
## LR(1) items:
program -> main_class defs EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> main_class defs EOF

State 146:
## Known stack suffix:
## clas
## LR(1) items:
list(clas) -> clas . list(clas) [ EOF ]
## Transitions:
-- On CLASS shift to state 100
-- On list(clas) shift to state 147
-- On clas shift to state 146
## Reductions:
-- On EOF
--   reduce production list(clas) ->

State 147:
## Known stack suffix:
## clas list(clas)
## LR(1) items:
list(clas) -> clas list(clas) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(clas) -> clas list(clas)

